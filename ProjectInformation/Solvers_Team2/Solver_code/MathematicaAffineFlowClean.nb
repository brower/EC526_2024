(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    186521,       3349]
NotebookOptionsPosition[     92995,       1640]
NotebookOutlinePosition[    185206,       3330]
CellTagsIndexPosition[    185163,       3327]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["This is an example of running a C code from Mathematica ", "Subtitle",
 CellChangeTimes->{{3.911819526556037*^9, 3.911819569696808*^9}, {
   3.911819889636095*^9, 3.911819890123982*^9}, {3.912109370170741*^9, 
   3.912109370830628*^9}, 
   3.912110349120344*^9},ExpressionUUID->"0956a9bf-5052-4c17-9a70-\
5625268789b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.893578609773304*^9, 3.893578624342265*^9}, {
   3.893578693708591*^9, 3.8935787743401947`*^9}, {3.8935788202459784`*^9, 
   3.8935788501534023`*^9}, 3.893578888531579*^9, 3.8935789652216883`*^9, {
   3.893579043521942*^9, 3.893579087207818*^9}, {3.8936189192692757`*^9, 
   3.893618946170916*^9}, {3.893619475498517*^9, 3.8936194965503817`*^9}, {
   3.893619876909328*^9, 3.893619883130537*^9}, {3.8936200445414762`*^9, 
   3.893620053334133*^9}},
 FontSize->14,
 CellLabel->"In[19]:=",ExpressionUUID->"553d1835-998f-4fb8-ae6e-03b7a6b4d032"],

Cell[BoxData["\<\"/Users/richardbrower/Desktop/4Topics/WITH_CODES/Solvers_\
Team2/Solver_code\"\>"], "Output",
 CellChangeTimes->{
  3.915885513623193*^9, 3.915885728172925*^9, 3.91588576630954*^9, 
   3.915885872975202*^9, 3.915885963710898*^9, 3.915885996453106*^9, 
   3.915886146387598*^9, 3.915886297920314*^9, 3.915886382954405*^9, {
   3.915886509463447*^9, 3.915886531937516*^9}, 3.9158866732743187`*^9, 
   3.9158867619712257`*^9, {3.915886825385189*^9, 3.915886892266823*^9}, 
   3.915886933173049*^9, {3.915886973114717*^9, 3.915886991732431*^9}, {
   3.915887081294083*^9, 3.915887094823152*^9}, 3.915887139151628*^9, 
   3.915887493203771*^9, 3.915887565303932*^9, {3.915888118065709*^9, 
   3.915888138936517*^9}, 3.91588817170299*^9, 3.9158882852336397`*^9, 
   3.915888441524869*^9, {3.921057116344881*^9, 3.921057142544043*^9}},
 CellLabel->"Out[19]=",ExpressionUUID->"0576e803-4748-4031-be7d-a7b359d78d01"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"RunProcess", "[", "\"\<make\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.911819657791918*^9, {3.911834353989496*^9, 3.911834399060055*^9}, {
   3.911834435755516*^9, 3.911834440417448*^9}, {3.911904976002202*^9, 
   3.9119049919663*^9}, {3.911905023878133*^9, 3.911905028492044*^9}, {
   3.91225695530849*^9, 3.912256957712841*^9}, {3.91588157011709*^9, 
   3.9158815750438232`*^9}, {3.9158816115691347`*^9, 3.915881643729908*^9}, 
   3.9158817080769043`*^9, 3.9158819523976707`*^9, {3.915882249629983*^9, 
   3.915882262397231*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"08669b6c-e07c-4339-aefe-06ef845e6744"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Run", "[", 
   RowBox[{"\"\<./affineFlow\>\"", " ", "<>", " ", "\"\< > output.dat\>\""}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{
  3.915882259797413*^9, {3.915886781757525*^9, 3.9158868068513603`*^9}, {
   3.915886837634416*^9, 3.915886838714202*^9}, {3.915887789747588*^9, 
   3.915887814257573*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"0954a45a-610b-421f-92c9-c047bd6cc8ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AffineTable", " ", ":=", "  ", 
   RowBox[{"Import", "[", "\"\<data/Triangle_32_0.dat\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.915887809083049*^9, 3.9158878209045897`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"20afd278-74e7-47b1-874e-a281427cacfc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FileExistsQ", "[", "\"\<data/Triangle_32_0.dat\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.915887669368226*^9, 3.9158876856695023`*^9}, {
  3.915887851370544*^9, 3.915887937022225*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"bb14f125-a6ce-476b-bd97-b04847516b3c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"n", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"While", "[", 
    RowBox[{
     RowBox[{"!", 
      RowBox[{"FileExistsQ", "[", "\"\<data/TriangleFull_8.dat\>\"", "]"}]}], 
     ",", 
     RowBox[{"Pause", "[", "1", "]"}]}], "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{"n", " ", "<", " ", "4"}], ",", "\[IndentingNewLine]", "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Clear", "[", "AffineTable", "]"}], ";"}], "*)"}], 
   "\[IndentingNewLine]", " ", 
   RowBox[{
    RowBox[{"file", " ", "=", "  ", 
     RowBox[{"StringInsert", "[", 
      RowBox[{"\"\<data/Triangle_32_.dat\>\"", ",", 
       RowBox[{"ToString", "[", "n", "]"}], ",", " ", 
       RowBox[{"-", "5"}]}], "]"}]}], ";", "\[IndentingNewLine]", " ", 
    RowBox[{"nextfile", " ", "=", "  ", 
     RowBox[{"StringInsert", "[", 
      RowBox[{"\"\<data/Triangle_32_.dat\>\"", ",", 
       RowBox[{"ToString", "[", 
        RowBox[{"n", "+", "1"}], "]"}], ",", " ", 
       RowBox[{"-", "5"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FileExistsQ", "[", "nextfile", "]"}]}], ",", 
      "\[IndentingNewLine]", "Continue", ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", "file", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AffineTable", " ", ":=", "  ", 
        RowBox[{"Import", "[", "file", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"vecList3D", " ", "=", "  ", 
        RowBox[{"AffineTable", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", " ", 
        RowBox[{"ListPlot3D", "[", 
         RowBox[{"vecList3D", " ", ",", 
          RowBox[{"Mesh", "->", " ", "All"}]}], "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"n", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.913717232199142*^9, 3.9137172416846247`*^9}, {
   3.913717514163007*^9, 3.913717569584942*^9}, {3.913717626153493*^9, 
   3.913717727059935*^9}, {3.9137177785073338`*^9, 3.913717819944461*^9}, {
   3.913717972916815*^9, 3.913718002008244*^9}, {3.9138985207276697`*^9, 
   3.91389856571445*^9}, {3.913898604312484*^9, 3.913898637742772*^9}, {
   3.913898709773005*^9, 3.913898773163924*^9}, {3.913898805707603*^9, 
   3.913898819522917*^9}, {3.913898922600872*^9, 3.9138989666478853`*^9}, {
   3.913899058557726*^9, 3.913899081864064*^9}, {3.9138991463799877`*^9, 
   3.913899149987253*^9}, {3.913899237601692*^9, 3.913899239881357*^9}, {
   3.913899379679595*^9, 3.913899416582316*^9}, {3.913899547219563*^9, 
   3.913899676703493*^9}, {3.913899708495296*^9, 3.913899746734819*^9}, {
   3.913899857837577*^9, 3.913899986563044*^9}, {3.913900065185123*^9, 
   3.913900075215522*^9}, {3.913900112048171*^9, 3.913900177452503*^9}, 
   3.9139002809300222`*^9, {3.91390031933645*^9, 3.913900386096539*^9}, {
   3.913901222988564*^9, 3.913901236802638*^9}, {3.9139026177168617`*^9, 
   3.9139027429393*^9}, {3.913912081608049*^9, 3.9139121094956923`*^9}, 
   3.913912141030571*^9, {3.913928336854583*^9, 3.9139284617641563`*^9}, {
   3.913928492968979*^9, 3.91392851893642*^9}, {3.913928549178178*^9, 
   3.913928564119369*^9}, {3.913928878309353*^9, 3.913928894656234*^9}, {
   3.913928991866448*^9, 3.913929023634693*^9}, {3.913929064975004*^9, 
   3.913929153269698*^9}, {3.913929190394959*^9, 3.913929214094221*^9}, {
   3.914509427229785*^9, 3.914509597617729*^9}, {3.914509643178877*^9, 
   3.914509673563447*^9}, {3.9145097227953653`*^9, 3.9145097517953463`*^9}, {
   3.915190619837446*^9, 3.915190623716578*^9}, {3.915881763188715*^9, 
   3.9158818008503523`*^9}, 3.9158818891607513`*^9, {3.915883225365467*^9, 
   3.915883244259591*^9}, {3.915883312928133*^9, 3.915883317327153*^9}, {
   3.915885277703918*^9, 3.915885350630239*^9}, {3.915885445942071*^9, 
   3.9158854669042177`*^9}, {3.915885577599234*^9, 3.9158856606390457`*^9}, {
   3.9158857044325438`*^9, 3.915885712598366*^9}, {3.915885761425825*^9, 
   3.915885761863407*^9}, 3.915885860759527*^9, {3.915885919024374*^9, 
   3.915885993090667*^9}, {3.915886130710395*^9, 3.915886141829314*^9}, {
   3.915886222174926*^9, 3.915886290191687*^9}, {3.915886336855901*^9, 
   3.915886376284728*^9}, {3.915886447855886*^9, 3.915886493703808*^9}, 
   3.915886528415258*^9, {3.915886642955517*^9, 3.915886667753635*^9}, {
   3.915886753269788*^9, 3.915886758742032*^9}, {3.91588681494103*^9, 
   3.9158868183389482`*^9}, {3.915886854873*^9, 3.91588698765127*^9}, {
   3.915887077704526*^9, 3.915887134959591*^9}, {3.915887165867675*^9, 
   3.915887166302606*^9}, 3.91588789897346*^9, {3.915888091473007*^9, 
   3.915888200349614*^9}, {3.915888253924081*^9, 3.915888278725725*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"216d65bc-112e-43b6-9e54-c8b1a0e28a4b"],

Cell[CellGroupData[{

Cell[BoxData["\<\"data/Triangle_32_0.dat\"\>"], "Print",
 CellChangeTimes->{3.9210571426314087`*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"104381b8-5344-4dd3-9f14-d4d8bca7f0ff"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJxlW3lYjtvXTpkpUahwSBQyJMkQViXDMZSTTEeEI3NI5JjHhJChSGZFiQqN
hlpNmoe3t7dJM4lUb+ZwDF/Dep7fda3PH1zta1v7Xvd9P3tYe6e9YpO1vaKC
gsLIxr+UGv99mrIpO0Vajkevevyp7JCDofNDx2U6VMN+edrFuo7luKDpx7gc
POkdfNa9pBqM++YfOe5YiqWp3a7Y95Dh+UlbzfbMfAtq9QpWf0cWY8q90grn
NTI8quZlWRP+FlyLbiwf+fY5qhxe2UotUoY7Jnqp9+1bA84OmyIGtCvE2kKn
i96tc/HlqEKwOlQD3vd/rjzRJR9/t1t413l2LnY70mpm0Isa+L3TpU2DUi4O
SVrp+PtMLn7+YDJ71YRaKP98MWTSKynuj7y74Ex2LuqsHfPdy70W5mbcu7U/
VIJVHvu9DnfKw0j3Yu+tRbUArdR1Zlalo8PPT9dGQx76DZw/VadvHRjZ+/WV
TUnG8a1PtdbakIcBe299rFhUBy5mF6eec4tH9Rqbb1fP5KGxe/yyX8frYG7t
mt5vt0dhq9mHla2C8zDraW/nsgd1MG3Lty7VESGoZZz6PSMhD4s/S9VbZdZB
Rtryhj7xPjhkbrqZJDsPj4936tKhrA4U6M+Gs33f6+fl4dIC78CnlWJ/4P0p
PvD4hAc4HsIPHD/lCzxf4gc4P8QncD6Jf+D8k17A9SJ9getLfgDuB/IPcP+Q
34D7jfwJ3J/kZ+B+Jv8D9/+3VZd65Zwrx6LR2oEj32SL/RUSlkQdP1GG6y/P
nqYwRorJA3RWL7d6C/M7L2hnWlyCv1aEr5x3WIoa9yuH9MC3sP0T2rr1KEaw
0RoZkiXFfc1C10BR/NJBy0ye4wBv065uGjkYGThswgjPGpBYFLz7NKMAJVOD
LlkvzcFrkxT3ff1WAw5zJwwPmJKHB18ablx3PQdLW10N3byoFsr8AiSmQ2Xo
X7F44ZjSHCz7+X5p2MNamPJpfY3f72wMfhg++I+eMvxgofq6onUdtFs6bPuq
g1mYX9Zt/74ZMox/dERTy6oOrKXxkreVqfg6YMep5O0y7DEqrujQ6TrwCQpr
uDMkEQ1UhvdxuirD06qvOv2dXAcXFKW/2i2MxZG1Bro/o2QYNT5pf+3nOuht
sX7KpZeRmLNmy8i2eTKc9fuszW0NOfzjXb1U73Mghk9/fnJSlQx7dn1WqWwg
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
hFZq
    "], {
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[GrayLevel[0.2]], 
      Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxNmgeUjVcXhr/v6n1GZ3RmmKIMiS6ijt57S4xuBEEQvYYoo0YJGQTRe4ga
g4ToLXrU6ITo9Zf/vOs835qbtfY65+y+33ffe2dZyRvdq1FPn2P+S+w4icyR
34jeuqcwEmokuZEC6BIjSYwEG0lqJIR3Qd7JjHxhpJ6R+ryVo5CRakY6GKlq
JKWRVEbCjYRRT7rCRlIbSWMkrZF0RooaqW2km5Fa2COI72qkJvoQ+qjOqZpR
zKUZqjBTGDF1qVeEfLrXoVY4ujDuyj/KSEcjncgXzCzVuIdQUzVq0Hc98uen
fmUj7Yx8YqSikR5GvjUSY6SYkQAjkeAcTB0PiyLwo1z5OBPho7hAYl388oFf
ALkzGMlo5CMj6XmXoE4S+k8Kdh6WyZjJ4ykluMWAVXLmLUR/aZk7Ap6EaUkj
mYxkpr7uH+MTDo9ZjZQ2ksVINiPZjZQ1Uoq4LNRJQR9pqFeYWMWUMRJkJIeR
8uTQuxw4FKO3QOYvbiSnkVzwEcUcNeilFHWL4y+schvJY+RT4nLDYwZwLeHH
TWV0GZk3Kz2WBoOS6JUvr5FKjt094drdsTvahX7KMGNZ4jLTX2f6lk8TI32N
9KG3isxVjjjhof3VvlYnrhP38uBWAczKE6f97QHn0Y7dYe18QyO9jDSgRgWw
rAQ2eaifm3dP/CeBvzDVrnZj1nHUz0muEmDXmJoFqBtJbEP4jKSHYOaqCsey
1UcXwozCU7ujz3JB5q9OPtVrBB/Ctyn1PwbXUOJr4N+IHkrBZ3PqFaOfcmDY
Gk4j4LUMXLQkTu8Wjt3juviEE1MLXRF4KEm9ZsxYH31Z6rUy0hb8PqG+7m3A
qSG97Tay2MgSuPkMrhYaWWRkJ721YC5x+jm+TeDEw6YpOu2RdnE09i/BqCsc
f4Nd+zwG/VjezZmpFDO0ZKYW4KP3CMfun34/RnJ2ZO7WxGlP2jv2cxdrpDd9
tAYL4aDfpgmO3WndtZcTHfudXBEs2uLr4dgOnb7zxjt2Xz/HV5gsI+dEcNWs
48C6JzxF01sVMCvJzFWZRXb9vsQxnzD5Cp/q4NuR2L5gLukD3p3xicJPObX7
NcBY9jrM0B38pa9JjX7kFtYDwF7Sn166w2NteBW2DcH2a/BvBN69wWYo2NUD
6x7gOBh8JYPI0ROf+vipz7pg2Au7agykx97oG1JjCLnFyzDq96Ef4bMETsRf
CXSNwLgfGMxmlkGcrbmLF+31AvBoAUbNeSvHCHj7AV/hrT1fyHsMcw9i7h8d
u//fMNMA5tLfAkvpU3ft1U/MNoQcrehPccsdu3f6Xp3CvJp7uGN3agRx7eBD
/iuM/ObYXf2VXuTfnphh+ArDyeDcm/sKak2lTl/mVh3vs9nRDzOd2svp4Cys
FoGH5p9Gjn6cTbmLq+7gMIO4/sR0dRI+Yzq1l7PAQ7jMxFeYfscp21zwEx5z
4GIwOKtODPceTsLnWaf28nvihtKD+u+CT08w0X5sd+xneDqzaZZ5xA0DQ2EZ
C1+xcLYUnveA61Tsi+BnF7GT4GObY3ctDt++1JvB7DPBbAa97KC/hY79XekG
jgPBTjjdM+IzfzzeBashzL2E/uLBbTbYzQJvvffS/zKwXEqc9m0f+in0utrI
fMfuzA9wMJfc86gpvIbjM5/+z4DvZHBbSc5VvGcyxwb4WcS8U8FmjWP3cQG4
6RyNzwzi1+MrzNZyyraOXkcS+x3zb6TOWHjSPi7mrnMcOMxmvp/pVxgcIIds
m7Bvxkc8rwC/OeAj2wSw9LCeiM8q8IjFVxhu4RSmvzh2h8459vd9Bf6/c5/M
ezV4rQHb1eTW3wzxRi7C7bf0sA581oPFLGaR/wXHfr9Mx28tPKr+WfqR/Tx4
boS7bfD8J+/1cLOWvqaB0Saw02fmEv39xVv7+Af9rwG7uWCi/FvhcyXz7Tfy
jJ4vUvMwfc/Hdyu9yucpNfaAg3o7SC31dpz+4phFNX9k3l3gIP0CahwihzA4
ytySI/SyC9y8nd5JDtU4Rtx++FzJvJr1pGP3Lx5OpD9Bj9ob/Q7sY454uN1N
n4vJod05xbzyvcyp2CvcZVuGbgV9XOWt+wH4uEE+bzcPol8D3pr3tmP3VFg/
ceznXvvy2LE7ofcjMFtH3FreB6m1mrzK8y/xN7Efos5hsN0A5tI9dyz/l+Dw
GBgfBWO9V1FjP/n+ptZR7Hepofy38JP/dSPXwGM/mJ4Ei9OO3a9tcHOC+pfB
+BW6zcQIh+1gsY33aWZQH3ccux9n/fDbCR76LHm/jcfJe9+xO3YeH82vz9IL
Iw+peQpf3R84dk+E1QX89xBzhx7uopdPPDN7GFzGdy/zaU+0L/t4y/6au/Rv
OBX7ktjLvK+C6RFq34aXm3AjuQFH1+FC7xSu3Q3tmHZL9+T6xxPX5rhDjkPw
qPv/yPcPmD8iXt8HKYmT72HihYHrWp1s/4Hxr+B2Dx/tTaBrZ35D/tPUuA/u
D+DrPnHvmEezvAWL6/T3Hv1D4sTZWWZ8TLzyJHLtDNIl436G9wPik7jWV+/E
zPIBPJTvHBiIF+1pOtfe07p2f86Dj3xSu/Z79jmi/ZDPRd7PkKfgI1saN8GW
yrW2l9i8PXjlV18YBrgWx9fsh/RXeB8DRw9DYZXRtfgHwIFmzunaeT/AWxbX
/n2U3bWc/s0+vEfe+e3VE/Yhh2sxVh7l0G5ldW3cTSch9wf2Jhv753LeYX9u
EytfHzmDyKPYzOyyamuHk8JlMnwyuQk9ZnDtviShrwfswX349VFfe5keHN+C
VyLsuV2b26ulfVW95Oi1P3mwq6e8nMLkGvnewGdKOH3L/r5jd9KwP6nhPw27
o7fiUuNTgFMxwejz4/OSfZQtPXNr/oKu1YvvEOzpkFfsj/ahED6KDUWnvPno
+w0YBcKrOBKHmcA9M7jrnRFRfc1YnF0KYk+0bx8RL32ka3cuMzuYiXthI8Wo
J98Sfjm0H1mJK8qpdxFivR0OokZ2crj0HEGPOcmnfcgFx+K1JNzn4cyFXvkS
ERMGXhnw8/hPBS/CrhS2vOjKoE/ulzsfduFcmrt0lY2E02sEfQuTcuyCdqA8
ZwgcfgLngfBYiHcFfELgviBx3k55fgHEpWe+UM5P6T81MYWwVTRSCZ9wJAxM
0lIvGKwjsJcGl7zwVdWP6+rwGck7Gz7SVfPjuwhSGL6Lwn8xuC5OjkjuNTi1
QzXxky3KSC30H+ETxLshWJenThVm0PxlwSMXHH7MXHWZTTzXQ1cSrktx11mH
eqqTA//85PV4LYdeuvrUKUmtfNhK41fWry+9Gxhpa+RLI22MtDPSB115eNFO
aF8ac68Iz005xWszuK6Ir84mfvdQfMVrZWKqgpUwa46uMvqW2CoRF4YtAn0L
3lWYVTjVBlfhGQ3v1cinUzvTmtmi4LodZ0101d2E/YoCE8W2Ik8tfEtQtzY4
S/8ZNvkXJYe3TzXprY4fr3q3N9IIrCvQexl4bMmcmrEDNum1b53gTrGd0TXA
Lm47cm8Az569MTEV4KciPDbC1sVIN2xNiSuP/RP0jRHdu6JXPn0vlKZPzdbM
TdgR8RuDrgWzfcEpbHviUxm7pAe67uRphm81eIyCS3HUC5v0lYhrBmetqNMG
u3jpzV26SHiKgsN28DXfyAQjE9HJ1tfI5/An7qLhpj8zR6P3bF/hq5ja8NIB
bjqBr/gbgL4j76+xR4NnB/jrhM9Azk7gKPxGcgqLUXDZGe66wNVgI0PhWLgO
44zB3gRbV84hxA4iVwzY9gDTntTXezj2xsR3gYMYanh+LbiP4N2dWk3hpRfc
dKFf1R6NXnZ9P4117XeW+PgGXRt08hnD+SXSFp++nO3AvD/Yiq9+8CT9t9ja
w2E/zmj0X3GOB0PNPg08WtGrx9MATnGqXZrMTJotlnMIuq/9+Nd7ErETyDMU
327UjaG29FOwyb8TOQbDxRA/vodyTuW+0MgiIxvAyfteHEFucTSD90i4+M61
OyacZ6Hz9k/6mbxHYRsFJmPgYyy8jYWPMdxng+04MPe4HA0n4/1w1/t75hgG
/kN5T8Eu3OZxDgT/QXAwCZkIVj9wnwTWE8jh9TqHuDh8YqmzkDMWnMcxw3h0
C4ibQm+LeHv8Dwfb6UZ+xGca/cynpxFwMB3sZ4LpDHCeiSz185tGbr2XoJtJ
/E9GlsPdbM4x3OdwjsVXtmVgLSxXwccs7F/Qg3pcTF3VWuGXT7FzwWQNc2m+
tZxxfjzN565zNRzMI0cc2C0Az0Xgr/c67OOpNQ6e4qjh+cVyX89bf4Pq785w
8omDjdyn8hZeW8B3EzrN+jPnEmQGPtN5LyaXYvZi24xtNVjOI/9SP36WoVuF
3w7wXA6my8B/OX56/wKeu8BY8+0Gl1+x6b4SLL3c8t1J/m3k9LhZQ27ptuI/
H/335JqLbxz513MKW32nxKPbAKYbwX8D+ttG7hh5ik72PUb2GTkJbpptPxzs
A09h/xvnZmybwfFnMN6M70Y4k8/v6DX/dmb4iRpbOJcx707wPAw2W8FiDfqd
bsIebIIn6Q4ZOc7se+BB92PYd4CleDlCrt281/Fey/sP6m7jLb+j9Cn9AXCM
96uzgbonOPfS3z7ue9FvBIcdYCE8T+F3iX7/Yn71eQEfYXiaU7z8yfkL/Wzh
/Tu2M0ZuGDlIrUPgcJj7YWY+wrwHmM2znSfHfmzyOct9B3m3g8tF8miOq67d
oStgcRKfY37zHWfGE9z3oI/nfZR8wv4yuhNgfQz7XnJ7NfZRXxhd4+5hcRo5
BZby9Xb5ND7X8ZduMzNdoI9z4HIenWy30Z0DC892y48b4fc351l6vcJMwuIO
uQ4Te57ZLqG/BE53ORV3j1xn4OIytuPUuoHtNDNdQ64y/xXwuor+IXf5/oPu
AX6e/k/y3qfeFeYUBk/wkf0Rult+89wEoxv09xjdefzuMKdm1Oda3xn6PXuG
7S51XzC7enuJ7p4fNs+536NHz/6QmKvMd50+H2B7ZeQNtkfEXcF+Df1DRPfX
Rlyf7UGxPp89X4PFv8x1i/tNZvmfa79v1ecHdLfRPUF0f2/kLb08ZoYXxL1i
9ge8pf8Pv0dg/Jzcd7HfJ+YFp/7HzKdg+4y+/wGDxMaWyGfvEt29ud4xz3tm
Seqz+vfY3hL/hvsbevqA/zN6fUEP0ifzWdt/6FL4bL6nxDzH9oEzOXGBPnuX
/0NmeAUvDtyk8tm3+FFfaZhNfatuOmyvmTM170TkUGxK+kniszOqpvrw+lSu
JL6EPXDJnZS5PhCTDNE9wGc/23fgPz1zpERSUD8dvll8dpYM2NVnRnRpeCfi
7eMdZCSHkXy85ZfJSDafxS49/QRQR/2mZZYAfLLiF0hPAfQfiG9SYrPjl4H8
uYnNwpmLfoPwyURvGblnpMd0xGRmzgzkTYcuLbpUxGShp6zUzUpv6icPuuzE
BJEru59eurz0EkROl/wpyZ+T2soXzGyKCUGXm/m8OfUuQA3Pno+YIHzykzcv
toLochGbh/7yEh+MvgD3UOKzEBNMP2Hc8/i9w40U4QyhVii2wuQsRP1Q4sO4
F8Iejs6LD6E3+UTgF8G7MKKaxZCifrrCfrWLEiefSN7/BzSKxpU=
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}},
    VertexNormals->CompressedData["
1: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
vc/WTZkWWbhs8hvnuYIdYPNtY9Tsdbz96I3NRcGHWVh9M2CkpnkH7Ij/+Fm9
OBenSTxa/bo4CxuKClcE+neA/5cvKZY/MlD5rspgl1A2NoXacr14+17R69T8
2p5kXCCfcyBCLRulRmsv1BTjgk2iweHJWbG4Jrw2s2NDNvbbL71TuoQLNys9
1u8SfY/yBiXnHKyzUUP6/P26DVxYr5s661GsN/quNurWdMjGQ4Mq2wZ2cOHN
iqFxYI7/IHWAWUeXrAt6dN0Bum4r0QmqDJ2NpC+YS/uqp31dIBxAinKooxwO
EG7A5EY5gzGDM/UFmL5QH8GU4aMp8R1Mqe/q1HcHkhMwozmxoDmxILmCTTRX
4TRXciSHcIPm0IbmcFxvQX+RSS12lj8Iz7uVitFzZU1CeffWZ80ijdIza7DA
z7/hZWcKBik+j/fknedtP+j+XKFWhceM2+16dFJxvsuk1Jm8809nX46V8dwK
NIn4tqzjcioeE9IsecR7jwiPrp2YIlqGSqf1C/7kpGL2Ve+GXt5zOnlTz2bP
smL8r6gzvG9MGp79mmA7j8dn2qv0dZa3ipDFaj3xWD8NVQPLvRfwznuPlI//
F3+gAL9r5pQeOZOGKSdfPGkN7oC4rKolnreysW3Kbdac4DQ8sb3y5lFOByQU
9GVF+fL+v4a9b2NBGlo/MdBqVuSCqN/UkPMTERX+pP4Ib0/Dlvj+zQ7mXFiy
8+bRqNwIbN1ZLhoqmI6fJuR7H3Pkgua/7k2bKgNxi+XW70snpqP8oLrmUU8u
jP4j7uWcF/spz/axc5tkOjr2me2U9eLCTDIfzBjzN5H68J3Wj6f1dYgeGNbz
neppIvphWP8+qj+X9AvttN/jtN9Ewge+UD5JlI804QlMntKEP5ym/M9Q/mOI
X6DA8Osf8RdWUX8dqL+OJA9whOZBmebBl+QHimh+XtH8dPQM5Q26aN6Q5m1N
ca2o+6UajB2jN331OcTlpW07daz45wdZm6S11eiyRO1g16xE1FuvnZ3Ju2+6
jg17N3ldJXJm3RWb4ZuI1pPadvPP59MHGxcpLSvn3f/v7b08GnFljHrubt45
59p518GMsaXoeVLpb8sJxPtJ7ldDeO+RH/4d17Ny2ThZVicntwRxtPDMa8t4
z+/HUTpnYp1Y+Gbq1lu1U5LwtqXwMj7P+MnaUSfk8vB9k03qVt0kNMjvTkj+
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
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.921057142697345*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"d80eac24-95a8-4947-a0fc-69dcad28d894"],

Cell[BoxData["\<\"data/Triangle_32_1.dat\"\>"], "Print",
 CellChangeTimes->{3.921057142717711*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"44f193ac-8e03-4e1a-a01b-8ffe5f1f3d6c"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJxle3VYl9nzNgYWBthrLsYa2B3osAaIir0mFoquiUWsQYgtKnaBSxiwomKA
guKQAiJ+RFLKdvVrYaMY7wBzHn87r3/Idd3XuebM3HOfOXPOcz7GNnZjbMvq
6el1pv/K0d8riXYpibfv4aYjeyyrLUrFhyeW2jmvMja7YWb7tcjjLg5YuaVR
s8WpWPi10wCn1cZmu67XXm64Ig/NQza1/s0uFe8NH17PZo2xWVKnVxVSJufg
npE7Fv2yJBUP7Y951dfZ2OzWwEUNzX+/g99n3Av7RHirvH0J+i7GZt9Tq9V2
apWJxWji0lQc3KGXOxI+7r6uYE61dDzne/ib27JU7L6yu9k8V2OzDqYd6zR8
dxu/3NL/0H55Kl5M0csv62Zs9vjCiUdeWbdw23SnlomEX+92yNqD8NFzXxnf
X5WM/Wy7Tx25IhXbX1h+SH+tsdnQ3y/u72aeiD2uf0mOJdymQ2D2YsKNElpu
NzWMw+HHq5i3tE/Ff2ObZMcTHrLwVMea2ZEYdL/ZpxWEf5tjE27obmy2ZJpX
4XyLMFw3u0ytS4Qfq71ilSXhR2b8sF+cHYzDHBaWf0C4V35c0VLCx5X5ZOqS
7YObdd40gniOndB3C+F6/O/R37/EVnRIxcuhF6fs+jke5Hi2D9I++wPSH/Yf
pP8cL8h4mR+Q/DCfIPlk/kHyz/kCmS/OL8j8sh5A6oH1A1I/rDeQemN9gtQn
6xmknln/IPXfvtLjNY2s7uG+ypimO5yije9s8NJrjls+PvKP+yXGKwUv9Q/q
OZ/sr3zQe4rZn7m42jtt/zHvFKzs8aHacPLHc067QzdHZOPW/EDXVUdScHFM
60pNyP8V+2MnGXXPwov7EpeY/p2Csyu0fXiXcNfBzt8MG2bglH1nkgoIfz7u
85GdxI/h7+lP0/XS0PKD9/Q9Pik4+EiLqV2Jz2ZbEhvOeJKCbuf3tGvlm4Kd
3jX+Gku427k2E5z267Bcyu4ugYQvmD1hsjnlK916cae0mUmoszq8tIFfCjrd
ehF+kfCP5ydueWQSj4/bnHy2kvCMidHZ9UknhyfeMwn/EI3LrNxu3CQ89oVt
zjzC1++t0vYf5whs/NQ3tJp/Cpb1tjz8D+EW451/8TAKwf7XNxmYEZ4ysahv
DuG6eXX/dBwSiP8YOB2cSXhBp5eHiwjfHxf75GG2J84IspuxjHDf2qdyDdZp
OEic7YC0w/OCnJf9BOknxwUyLuYBJA/MG0jemGeQPHNeQOaF8wgyj5x3kHln
nYDUCesKpK5YhyB1yLoFqVvWOUidX80e7eW//S7uf1iHloZOW0fmBrdCD9nn
4ZS9gz7+vk+n2Ter7/Sqn3UO1sj40fsG6a78tS8VfiN/uoW7Zx0ccAfPHrMY
2++gDlO/TClbQHiLN29XnG6diU+7+uR7HNJhl77FkRibmR5z/+BSneq/a+Xc
8MM6nO1QN2Is8VN+h93rBu9v40LrH6d1Xjp8knx/8kvC15wOtXG5cwvrxLtN
SPLWYZ9fKxc5EP/6AYG2C9Yk45iC2suOHdFh/vYlkwuK86Wr0XydRSI6B3Sz
mfO3DmtXPn5oEuW3ZQnRcQhNbWP1fXSYvT3w8jnCreZcOfWe6v+rFs2+biVc
6e3Ei/fu4UPCsMuz18cKCD+Q/926G+lzZ9stEyblBONs06EtTX11uCNgVJ41
4RZJbk3m5/igyYiQunMIz9j+oJH9up/1//6roDwHwk+7Dui35ud4kOPZPkj7
7A9If9h/kP5zvCDjZX5A8sN8guST+QfJP+cLZL44vyDzy3oAqQfWD0j9sN5A
6o31CVKfrGeQek7N7haauTYfTzsv3NX0TZK2jxj8Xn3ogXm5OHrEhZOeb5O0
9fVwga5d5VHZuDG3as9775I0f0JN3kd16ZGFY9o4dKv+IQmrtH/+/Sz5f3dU
4cLGjTJwbvq/800+0vj5Q3JnUbwl9aBMGi4wfOLQ8VOStp9OP2/do8+/KTgt
e8nEBoVJOKnwy+T9hDuPeZn65oAOzbpuqvGCcFWXzjYYNrHhrCQMHRrcy+tz
ktYnBO8YMfVzu3h0iLp3qO+XJFxrenn1c8K7jnkd6PUxGpM+GtuFEb7k1rQ1
pqSTZbGTV1dxjcDql1/Xb1KUpOmwIFIvemPNkNI+g/A1pu/zThF+KNTF9phl
IF6NDBp1lPD8cium3yT8463+4wtyPFHX+ddVEYRbFR5zzv+Jg8TZDkg7PC/I
edlPkH5yXCDjYh5A8sC8geSNeQbJM+cFZF44jyDzyHkHmXfWCUidsK5A6op1
CFKHrFuQul3QOqReikMetlr/146uVglav3Rmj+2mWVNz0MpvWsG8EQnaPrI7
7pvF8YF3sKLzuBjnkQnaulu29XOYb5tMrBI2Rrd2VILmf9qRXcttaqTjt7V5
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
n4OGyy3TCVf3BpMvBUXPofozpG4ntymOu7VzWa9hictqDk3EwobFne5urR/u
P6VixVVUf3RHktJaOO3W+pOSNpLqzwnjfwrmEq72kWl/nk4dQvXH5eimqicJ
V3XAYE2wR7W8YJzQam7rV4Sr/EbRqa5Jno+Gj33+zbzv/6k/CjfJmzp34M/x
IMezfZD22R+Q/rD/IP3neEHGy/yA5If5BMkn8w+Sf84XyHxxfkHml/UAUg8P
pkzsmU/1ZOuPvn4D7N1Bfeda+KJm+hSqJ330P99JIFzd/58415q20hR8ViXU
aKSDO6j70pxvbSMdqZ6U+ukO6t7JpUSYSawTd1Dn+jfv7rpnUj0p5cEdVH3e
Gt1hSxOqJ6V8uoPqbytOa+84h+qJwlUfMr9Wq099qZ6U5ssd1D7yfOu6UC+q
JwpX9aFkveZ5arjSA+MgcbYD0g7PC3Je9hOknxwXyLiYB5A8MG8geWOeQfLM
eQGZF84jyDxy3kHm/fNlx7QDWn3wB/U9dHnOVYtv1J84J16jE6c/qP7Kq9PM
biZUH9rr3C+fJ1ydC47WCyn6g+pDbprZu96O/qDuJ/NWWtWoQvXBI7s4EH9Q
9z8Pt2z1X6bVB39Q5+6FT+e4+Gj1wR/UOei/9cEfVL9aui8Ecx/iD6rf+G99
8Nfy+N/64A+qDvy3Pvwcz/ZB2v9vffjpD/sP0n+OF2S8zA9IfphPkHwy/yD5
53yBzBfnF2R+b0fb1ulB6z2PuvTvFc6C+j7+56RPO9bTevewdOm4vuJZUN8N
pw1LqNiP1rvpSNO5BpXOgvrOMjUyqWpDWu/dL5TJciVc3VfrjD53OEbrPSYz
MzyNcHUf2NQNvn6l886oolPerSufBXUP0zFnxJTmtN5bO3uELSBc1dUhnc38
KtN634OrLLYRrnhW/YNemQXppwlX61H1D6G+NrRVngXRV4DEVf8g7fC8IOdl
P0H6yXGBjIt5AMkD8waSN+YZJM+cF5B54TyCzGOC2ZGpV2n9vt8454j12Eug
3kWUfv+6hdfsqpjUGXdJqxtXms8K+eySjPdDQwuuEK6+r42c4NgulM4XpX3O
JVB9jkGlUxs70vot7YsugboHHlbBte1iWr+lfdQljYdbg7IK3g8NQ6N/0l64
Ea7WRdcvKUuu0/p91u58pTjCVf0sPRf4cN94CdT+q9avwlVfx+NBjmf7IO2z
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
X/w/rcgWyw==
    "], {
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[GrayLevel[0.2]], 
      Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1: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
Y/ApyRnjFysWv0j0aLAY/CWlwP4PXsXGlQ==
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}},
    VertexNormals->CompressedData["
1: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
pwFbso8GoVXrwpZtwXiPY3fMn3IzdDOZ536/QxCSObN6mhXG8+8SHNj47SFS
B3JZdTSuknlhKp2Xl857soPwBDbPn62kL2D3dT+N6AB/dVhGdfg4negGrlS3
IarbPjuiM3xi6fxDjfgCDdQXIerLVF/iIyhTH5uoj66CxHeQp75XUd+7uDkB
S5oTEZqTsqskV/CU5iqZ5uqosW5vzpEraJbrVbEudX80ZvN1PnO/d/TC4ace
Cy8jnp7zXwKQH/J8/2U2c+9RuFtSTk8jHd3f4ve2q9wPvZzrNI85J46JmV8N
356KPH6ots6o8kOv5yc7MfttqQW32hY9SkYXN/286P/YD+1MtzRj9jOyTtPe
1gxeQM91X9vNeOiHjHX3VDG/I+bqJbe3isShg1/C8C+LH5qm8oqfea6j+l8p
2mpEowDB2dfnPvJDn451zGD0l7k4gbf2cRi6rnXNMwLPG6vSyfMQ47sW3uyx
lgpEpR+nTJuJ8eBn25yUsL+cwq88N596o9A9VRlFlX7oxWGbEleM91oMlz0o
d0Ci5UK/wzDel6qyLm3s/+9vb3zK5j2H8ccuxpMLMS7sR8YDe3zPVVIfzrHq
Uz7A5tMcS/hDAYv/mx7SL/ztl0P7pfoAW58TNkRPeEb13En1fKZA9IdEqr8x
1f831y84zvJLwpT4C0+pvw3UX914kgeYQPPgRfPQtY3kBybT/PDZcvNj+FOJ
N93jMnrLkayQlPdAzp/3dTL3ycX39NQuLs9AsVrJi4+ou6FNsklGzD1b2Zm2
6z/+SUMnTIYVP6u5oUm3E6Yy9xK9wTciXuD92471hgfTV7qhouep35jz3dQo
xZuS+LycVTWYu1TVDd3s7hzP7J8d+iSdJuH1alJd1glFFTfUrnac7FtmPk2a
EKYYg2LHaYw5abih4l69KczvSMOiR3c+4P3bF/+Xu59vcENx36Q3M887z3+7
NBbg9crkpfmDGRjfcmiBM+NX62/nHYvxeqV11B5ZrHZDRtuOnD6N8e9/ZBVW
4vXKg1/5dI+yG/Jzje1BGNd9di3PB69XybWJNd24XxcLP6dWjGs/JDgksXC1
X6QOHGfVMRsm8wJ7XvFBwhOMWTy7FElfwKF9xdK+dJ8THeA81aGI6qDXQ3SD
qVS3DqqbZTjRGVJYOq89S3wBY+rLTerLUn/iI6RRHydTHxeVEd/hAfV9I/W9
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
YkMGB8TC/+pTEtA+RV25ED4/fE/+/8X/AWCBqVQ=
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.9210571427937803`*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"dae379e6-fe99-43a2-ad99-9aa0a6b89ce9"],

Cell[BoxData["\<\"data/Triangle_32_2.dat\"\>"], "Print",
 CellChangeTimes->{3.921057142809655*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"d9b072e7-834b-411d-bb73-f47a8bacf472"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJxlm3lcz1kXxxvZKtsgW5HIUkgGWXOyhZBtoinTY6RJD8qMPTEyskTaU6KJ
xlKepk1U5JYtSVqRLKWxy1KmbOE59Tv3G2f6o16v9+v7ut9zP+fcz/du6S90
ne3YSE1NbRD+Use/p7Nc87MKysT28MApLZcVigFN/vzYOs7EvHLz9qLjO0vF
qcoXl2yQB00+uGcWcs8n61tm/HJHpM/f2SECuWtYVBsf5BqlH3SOz7slQkqd
v/sb+a0OjqaXkN8YvMUh2OymGOfmpdvDpVB0jl5o9BF5xue5CQ49bwi/CQMj
bZAbWR+sGBBvYn5p3MrmuhrXRFmrIkMf5Mu6/7jUFrlFzryszBcF4lrzj9PS
kN/TCojajLz1yfHnFhbliX1dFo95hLxva62kw8jfRTglPl2RI4ZO0P7UwrVQ
RHz3acNF5Iv9bWa/GJMlVuy3sDVCXrFssHY58h5/zzK6p3FBJNSsOTEJuXPW
387vkG9yyA3PLkoXQb8NiJ2PvOPE1u4tEkzMZ22NDrGEFDG1e6/Vy5C/LUua
qoPctHGm4+2iOFFYbK/lhvxYYPiTXgqPEMZRJS6bkfsubjSxP3I1+pnvFxKx
FfmR+fd+NG54Hvjz1D7w9ike4PFQ/MDjp/4C7y/pA1wf0hO4nqQ/cP0pX8Dz
RfkFnl+qB+D1QPUDvH6o3oDXG9Un8PqkegZez1T/wOu/bcbw5JXTysR5fZ3J
HcPylecf5PW49W7jXbHvz3cOtsi3+mw39EN+Prjb9OpFt4UFdLEKRR5V82Tt
FeSicNHFW5Yl4lyle9Mi5Kiap3pdv7ZVW8SYFIu2p/W9Nffli95dHywwRT4i
bLeaS4frYkh48/LRyLsXTdR0RH6y168ZnWsLxYfYFYU/Iz+WaLvAB3nMG53n
yffyxdmMu+d9kUcdXBuUhNy0R6dme3bnCrtnO7ecQD481XLNDeRq97doRP6Q
LfZOSCsrRL73iX2fauQpQzbeCzLIFNFJJlrPkRuPeBHYCuukU9IH600vz4pT
vf8c2nR/vgiMEHk9kV/ermUeuTJN/JIZVtsBef++LS4PQe54RA8jThLvf7vm
1xN5TW7hprHIDTV2HPeGKGE9c1Z1P+RVezpUT0HeatshD71rvmLz8NZ9TJCn
rwkbZtXAgXNqB3g79F7g76U4gcdJ/QLeL9IBuA6kG3DdSGfgOlNegOeF8gg8
j5R34HmnOgFeJ1RXwOuK6hB4HVLdAq9bqnPgdf700fSJRrtKRWVx7kJD/1xl
HBlsvNDF+Nc7wmdZ5+XByGX70yOzLnSyuSWMGzlsUA/IFSecl8Y2qYuzz/Wo
KvT/Xy6a9FmM/J9a58iRyGf0HBB0Ev3fNnXzsvPImxyNclyCvO/GXSlL0P8f
37GZ2SkwV0xasejBHuTThv/TofXLAtFlUGKuA/JT9nt7pNfV7axFMQfQ/6dv
aTkjFnmjhW2N7yMPGRqfPm9ljrhsurzZU+TrPZu8UVd8MktUdJo3XzcoV1xM
H7lbD3ls074th2qi/xudnW6BfLzus3JT5B+1v5vX9Fq66LY0/pYTcllvpVGb
1oej/3vFRDjvQL6i35ZrNkrdxglzqxCTvci3Pjq00EHhEaLmhc+baORLTmmc
cf7C/yXvcST20ZKG54E/T+0Db5/iAR4PxQ88fuov8P6SPsD1IT2B60n6A9ef
8gU8X5Rf4PmlegBeD1Q/wOuH6g14vVF9Aq9Pqmfg9WwY9GqL/W93hf/8T+Pf
P89WviMxXssDZjneFm4zZ3rNfZGtjC+30rclg6eWCIcJB/MSkMt4hp1r+bYW
/VzV72yhs2/7xmXIxzTtZ5WEfr5xp1WwLfJVdj067kPuc3Tmnfno53NbDUjY
j1x+T42iNx56jX5u7Kd1tQz5H/q6iRXIi0781L6xT66IHu+yVedVtuJLT25c
n/EZ/fxKL+tb05HLecIkm+/PP0E/DxiWfmUNcoNkv4SJyAOd7FudQj//vDbW
NhS5l57DC9u6upp+80mzVWmizdMengnIZR2aGX16uR39XN8uODYbeYXVmvC1
dXW7yykvD/38xgfv1beRP+6Q2tYD+QONLfsXop9LfqJmjLVnAwfOqR3g7dB7
gb+X4gQeJ/ULeL9IB+A6kG7AdSOdgetMeQGeF8oj8DxS3oHnneoEeJ1QXQGv
K6pD4HVIdQu8bhMOhH30QH/ODDfbEzXlkjJfKrn4x9Gl6M/WZ9u5fUQuvyNV
biaGY8bcFNu0Xd5NtrykjLveh7Xi36M/py6+tDYQuYz/kMnLXw6jPw/T6Tco
F7lNtz+PXEIe1ih0/0T058Qc7ycaUy+JKxol918hvzV4aqMi9GeTTa8OTEDe
ruXsV+1Rz14/bIs8hv78xs8uwAW5/C5vudm4UzD685nIi1tCkN9Ygj1H3j/F
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
/7/4P9n6FF0=
    "], {
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[GrayLevel[0.2]], 
      Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1: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
Y/ApyRnjFysWv0j0aLAY/CWlwP4PXsXGlQ==
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}},
    VertexNormals->CompressedData["
1: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
uL1YuyRzvzDXdMrMws/v+ikfjDwwLrm7jcwVNtMGxg/h66vhhkyKJcaH8izI
XBpUtdYtSN0Nqag5qxliXNFpJ3neWZP90MzVZRy+nWVuZvAh9R5d5vk6M4us
B/b6UiUSH+6y4k9dSfjAEhYfg3mEP7D5G+0k+cIZVr5xXH3AgKXPK66eIMzS
s2wd0R+Sqf43qP5V0k/FB98noX7+8EnDy/fC279LpJl6uQV4qPAx74trPzxr
mhkLnINp5PsZ3T1HxAbw9fJDYp3GF9FY+HvZiPThvOkzFQTlo5CAUFWDLV7f
3+XnxdyXb/C8v2miwUHDCjNGqyVi4bGhIpnfhoSO2m3B18uHqc1vUjHeGTtj
GTP/u1/IcjyOr5f/wlxQMMZvlPEkM8+Vy1ctbr1h4YD2zA03DMe4Wf4Vcm42
66M2g0MkC++qJ3FgEivOejGyL7D3VVpCeMJPFs9vqiQv4Kd59dG8zLKIDvCd
6vCH6pDgSXQDIZZuVGfoZemc8dto6rI3CYjntu5Fr0dxMPakAflO77mNy9cr
mnFI/nLuDamseChfvpR8p6T4Z7HCaXx/Wfb2E7p/KB6C0wzOMHOOSsgnpeg5
kWhMqfwBvbx4cAucReZhA+9QZxmlYLTTGimNx/gY2B3FPE+J2EuqRUkFoLJB
qyFbHEdo4STyXmZLUfCHa3g+jB99FGGB8R1NP1SZcyHXd+sr8O1FP1097fTz
3HjoC7Mn55Oyc0OY9ZDAWl8RSeJDKSv+ulDCBwJZfF5kE/7AS/mvp/zdxHWY
fMGO5ruL5vvElugDiix9VJ4TPWEM1ZOf6pkV/3WB2rs4VHZm0p1XLknQkzBb
k5kHGp0+VYUpx6Iv6xSMFGbuh/S+Uj1mPizvzDDbJBmFjPc3NL4V3w8xVT3T
mDqqGhgs5tHkoC2bO6XLMb52/4sDzHPolf9Kzu9VCUTx/uKj4Rj/yRlsY843
Vg9n1d/HfrbbOW2FG8ZXhgSR87TaG91PQuY4oI1P7nRbYTzTVo+8X6jm4uDG
wu/aZzNxwJoVR3Qe2RfiWPvGqxCewOZ54TnJC8xZeb11IDrAd5YOB/YT3aCC
pdv92r7XRl2x6LGc0LbN9w/AvhBjNWZ+Nh5XVBq5IAbpXpTq6LFJgS3LYslz
1iHtpR/fYn++u5rCex7jX+trOMxz+uf82mcPsT8dy3WNcjH+2PdiL3P+02p+
rFFTLgBt3GT7Jx7jJ6a2kPPGzsdux/LnuKGZ946/Dcb4+gFXcu79b/4RK7j9
dCfGxbWydjI+qb9M1oM4a71jAIkPHjR+EY1P+YADi0+ZHuEP7yn/L5T/G36S
L7Dzjawj+kA71SeW6qPxOdqA534Mml4/8pD/ZCqkt4lNYZ43G1U1Fo2TikIL
VKd/PS94EOb5Chsx5xVXQiSkjmO/nd3aND0R43yvw28w52A3SzmOI9hv2Wlq
jhyMq2gLkXNXm945r4qUvNDqVZNne2H86+EIN6aO6QJb7v4n4YBajacmr8D4
kG5HJPN+6nEKwaGZ4t8orjNDgokD7Dhn08i+wN7XMJbwhAssnrd1SF4gw8rr
zQ+iA0xj6QAldT3+TVFo35988QGPNCjevd2BOZ8J2DyRd6dEJEqRfVpQdCcN
1KNNtjHnfhNcis6YLwxGitPsDEIxrvu5jnxvtsNr/6NW7J9zz2oerMC45TND
KS+Sr6wjSLihcJHzkRYYv+Hm6UXen3K2hJeWSNW4D5SJm2M8tu73LuY98rxr
ZD1wWOujl5D4cIbGt6LxA60IH2DzyfIm/OEAi7/AaZIvRLLyLT4bxG/REon2
8P+n6iuTATfv7uZhzjMPZNz4xaPHQX9mPJKzic0ASLvdypyf778h2xGuGIhG
Rp4/lMZ43bfXesx7nAnL7H5kL/RCcppjvq+OywArDzs55j3jtrJRpeXYD12T
v753xrjigVBLZt8bDgSHlxRXorhxLokDsqw4e0fIvjBM971F983zJTyBT5zL
05DynBtF8oIYmlcdzWtBX0Vi6ZFwdJjjrPf+VSZcP1sxizn/l35qeslBORjV
DsUuKLc4BAoxD7wZPG2hgU2jRAA6/s6mLxPjtVvG1TLvSU+UGt67g+v7pnfK
NnxDgnEHiz8z7/drvtuau7q80Uu8/mvGVowvDFs9lvleZVSUrIce1vpVniQ+
HGXFP/OO8IEaFh++csIfjlL+Nyj/Zz3iEiX7Q1BGH8/T/ONZcLvP9h7zvqy5
re2yiVIgWjhboCx9bDZ8zmtPZd7nqmXukM1T9kIHIwWKtfmy4Zq+vwvzHcLY
G91V2wQdUPzC316ReP3M9QnjmO9qtscQHGJZeMshEgcSWHFEXpF9QY7uO0j3
ff6N8MR9n8uzgfL0qveUWhwbhO6cK6m9uzYHTtZVXmHeL89PPuNTIh2AEoyP
NQzczIENnL0azHcRBsGVIjenuaHDZZWX2jDu3m1PvvMJDzmr7+ry6ErCRy9O
1PUcmLzr418NJq9Ush6OsNZLc+MDO37xFcIHbrP47Nw4NLw+cBsyWlQxt0Uy
DyKe1WxkvsdQ3On7ZryqFyrpXXctfW8eGAqYazLfF1VvjC/dqOWA8sZP+6Qa
nQfnDV53MN/RlVUTHA6zcJFMEgfKWHGK88m+YEX3Daf7iu18eZrz1AfF6Mhe
UO7KB4ev8juY75c4RTc/HtVyQ7KBYwcyDQ+Df2ZNOPOdXtYer0W8PEo13VPu
T03D+NqdM3KY71RDuetBnrU+vI/EhwM0vj2Nf+HJNrmrXe7I5VvLefvsIyCY
wHuR+d7v5dIJSi04328Cjm0Cf45Aq0PxIuZ7V4fr4xkc2Ph5bhxwZscJTBK8
tN0F7RuXNMXpzFGoMtT1Zr6PNe951RC5qU1fcO4RadHuo5Cjk5fBfDdekk3W
A3u98+D9O6sstdDK6tqJjvsLwDXusR7zPXlIdCuDAxv/d3/nW+C9af+4Qng3
vzeY+f+L/wEKWuaI
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.9210571428476753`*^9},
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"a38ab542-9c3f-4be1-b58d-ed69b74f5f0a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1113, 823},
WindowMargins->{{Automatic, -1}, {-58, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"], 
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.5 Inherited,
FrontEndVersion->"13.2 for Mac OS X x86 (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"291d3cfe-4566-4dce-929a-bd11e7cd01b9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 325, 5, 79, "Subtitle",ExpressionUUID->"0956a9bf-5052-4c17-9a70-5625268789b2"],
Cell[CellGroupData[{
Cell[930, 31, 668, 11, 48, "Input",ExpressionUUID->"553d1835-998f-4fb8-ae6e-03b7a6b4d032"],
Cell[1601, 44, 924, 13, 52, "Output",ExpressionUUID->"0576e803-4748-4031-be7d-a7b359d78d01"]
}, Open  ]],
Cell[2540, 60, 656, 11, 46, "Input",ExpressionUUID->"08669b6c-e07c-4339-aefe-06ef845e6744"],
Cell[3199, 73, 424, 9, 46, "Input",ExpressionUUID->"0954a45a-610b-421f-92c9-c047bd6cc8ef"],
Cell[3626, 84, 302, 6, 46, "Input",ExpressionUUID->"20afd278-74e7-47b1-874e-a281427cacfc"],
Cell[3931, 92, 310, 6, 46, "Input",ExpressionUUID->"bb14f125-a6ce-476b-bd97-b04847516b3c"],
Cell[CellGroupData[{
Cell[4266, 102, 5095, 93, 481, "Input",ExpressionUUID->"216d65bc-112e-43b6-9e54-c8b1a0e28a4b"],
Cell[CellGroupData[{
Cell[9386, 199, 205, 4, 36, "Print",ExpressionUUID->"104381b8-5344-4dd3-9f14-d4d8bca7f0ff"],
Cell[9594, 205, 28504, 485, 438, "Print",ExpressionUUID->"d80eac24-95a8-4947-a0fc-69dcad28d894"],
Cell[38101, 692, 203, 4, 36, "Print",ExpressionUUID->"44f193ac-8e03-4e1a-a01b-8ffe5f1f3d6c"],
Cell[38307, 698, 27689, 472, 425, "Print",ExpressionUUID->"dae379e6-fe99-43a2-ad99-9aa0a6b89ce9"],
Cell[65999, 1172, 203, 4, 36, "Print",ExpressionUUID->"d9b072e7-834b-411d-bb73-f47a8bacf472"],
Cell[66205, 1178, 26750, 457, 422, "Print",ExpressionUUID->"a38ab542-9c3f-4be1-b58d-ed69b74f5f0a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

